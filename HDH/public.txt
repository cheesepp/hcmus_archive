public:
    FileTable **fileTable;

    FileSystem() {
        fileTable = new FileTable *[MAX_PROCESS];
        for (int i = 0; i < MAX_PROCESS; i++) {
            fileTable[i] = new FileTable;
        }
    }

    ~FileSystem() {
        for (int i = 0; i < MAX_PROCESS; i++) {
            delete fileTable[i];
        }
        delete[] fileTable;
    }

    bool Create(char *name) {
        int fileDescriptor = OpenForWrite(name);

        if (fileDescriptor == -1) return FALSE;
        Close(fileDescriptor);
        return TRUE;
    }

    OpenFile *Open(char *name);

    int FileTableIndex();

    void Renew(int id) {
        for (int i = 0; i < FILE_MAX; i++) {
            fileTable[id]->Remove(i);
        }
    }

    int Open(char *name, int openMode) {
        return fileTable[FileTableIndex()]->Insert(name, openMode);
    }

    int Close(int id) { return fileTable[FileTableIndex()]->Remove(id); }

    int Read(char *buffer, int charCount, int id) {
        return fileTable[FileTableIndex()]->Read(buffer, charCount, id);
    }

    int Write(char *buffer, int charCount, int id) {
        return fileTable[FileTableIndex()]->Write(buffer, charCount, id);
    }

    int Seek(int position, int id) {
        return fileTable[FileTableIndex()]->Seek(position, id);
    }

    bool Remove(char *name) { return Unlink(name) == 0; }